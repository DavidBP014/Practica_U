{"ast":null,"code":"var _jsxFileName = \"/Users/juandavidballesterosperez014/Practica_U-1/frontend/src/components/location/locationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStyles = {\n  width: '100%',\n  height: '600px'\n};\nconst LocationPage = props => {\n  _s();\n  // Estado inicial con un marcador para la ubicación del usuario\n  const [markers, setMarkers] = useState([{\n    lat: 4.7110,\n    lng: -74.0721,\n    title: \"Tu Ubicación\"\n  } // Coordenadas iniciales de Bogotá\n  ]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const newUserLocation = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        title: \"Tu Ubicación Actualizada\"\n      };\n\n      // Actualizar el estado para incluir la nueva ubicación del usuario\n      setMarkers(currentMarkers => [...currentMarkers, newUserLocation]);\n    }, error => {\n      console.error(error);\n    });\n\n    // Aquí podrías agregar lógica para obtener más marcadores, por ejemplo, jardines\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Map, {\n    google: props.google,\n    zoom: 12,\n    style: mapStyles,\n    initialCenter: {\n      lat: markers[0].lat,\n      lng: markers[0].lng\n    },\n    children: markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      },\n      title: marker.title\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationPage, \"isiZ+GsY8P73LaJKKjY/3cuIYlo=\");\n_c = LocationPage;\nexport default GoogleApiWrapper({\n  apiKey: 'TU_API_KEY_REAL' // Reemplaza con tu clave API real\n})(LocationPage);\nvar _c;\n$RefreshReg$(_c, \"LocationPage\");","map":{"version":3,"names":["React","useState","useEffect","Map","GoogleApiWrapper","Marker","jsxDEV","_jsxDEV","mapStyles","width","height","LocationPage","props","_s","markers","setMarkers","lat","lng","title","navigator","geolocation","getCurrentPosition","position","newUserLocation","coords","latitude","longitude","currentMarkers","error","console","google","zoom","style","initialCenter","children","map","marker","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","apiKey","$RefreshReg$"],"sources":["/Users/juandavidballesterosperez014/Practica_U-1/frontend/src/components/location/locationPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\nconst mapStyles = {\n  width: '100%',\n  height: '600px',\n};\n\nconst LocationPage = (props) => {\n  // Estado inicial con un marcador para la ubicación del usuario\n  const [markers, setMarkers] = useState([\n    { lat: 4.7110, lng: -74.0721, title: \"Tu Ubicación\" } // Coordenadas iniciales de Bogotá\n  ]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const newUserLocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          title: \"Tu Ubicación Actualizada\"\n        };\n\n        // Actualizar el estado para incluir la nueva ubicación del usuario\n        setMarkers(currentMarkers => [...currentMarkers, newUserLocation]);\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n\n    // Aquí podrías agregar lógica para obtener más marcadores, por ejemplo, jardines\n  }, []);\n\n  return (\n    <Map\n      google={props.google}\n      zoom={12}\n      style={mapStyles}\n      initialCenter={{\n        lat: markers[0].lat,\n        lng: markers[0].lng\n      }}\n    >\n      {markers.map((marker, index) => (\n        <Marker key={index} position={{ lat: marker.lat, lng: marker.lng }} title={marker.title} />\n      ))}\n    </Map>\n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: 'TU_API_KEY_REAL' // Reemplaza con tu clave API real\n})(LocationPage);\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,gBAAgB,EAAEC,MAAM,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,CACrC;IAAEe,GAAG,EAAE,MAAM;IAAEC,GAAG,EAAE,CAAC,OAAO;IAAEC,KAAK,EAAE;EAAe,CAAC,CAAC;EAAA,CACvD,CAAC;EAEFhB,SAAS,CAAC,MAAM;IACdiB,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;MACZ,MAAMC,eAAe,GAAG;QACtBP,GAAG,EAAEM,QAAQ,CAACE,MAAM,CAACC,QAAQ;QAC7BR,GAAG,EAAEK,QAAQ,CAACE,MAAM,CAACE,SAAS;QAC9BR,KAAK,EAAE;MACT,CAAC;;MAED;MACAH,UAAU,CAACY,cAAc,IAAI,CAAC,GAAGA,cAAc,EAAEJ,eAAe,CAAC,CAAC;IACpE,CAAC,EACAK,KAAK,IAAK;MACTC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CACF,CAAC;;IAED;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA,CAACJ,GAAG;IACF2B,MAAM,EAAElB,KAAK,CAACkB,MAAO;IACrBC,IAAI,EAAE,EAAG;IACTC,KAAK,EAAExB,SAAU;IACjByB,aAAa,EAAE;MACbjB,GAAG,EAAEF,OAAO,CAAC,CAAC,CAAC,CAACE,GAAG;MACnBC,GAAG,EAAEH,OAAO,CAAC,CAAC,CAAC,CAACG;IAClB,CAAE;IAAAiB,QAAA,EAEDpB,OAAO,CAACqB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzB9B,OAAA,CAACF,MAAM;MAAaiB,QAAQ,EAAE;QAAEN,GAAG,EAAEoB,MAAM,CAACpB,GAAG;QAAEC,GAAG,EAAEmB,MAAM,CAACnB;MAAI,CAAE;MAACC,KAAK,EAAEkB,MAAM,CAAClB;IAAM,GAA3EmB,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAwE,CAC3F;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAzCIF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AA2ClB,eAAeP,gBAAgB,CAAC;EAC9BuC,MAAM,EAAE,iBAAiB,CAAC;AAC5B,CAAC,CAAC,CAAChC,YAAY,CAAC;AAAC,IAAA+B,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}