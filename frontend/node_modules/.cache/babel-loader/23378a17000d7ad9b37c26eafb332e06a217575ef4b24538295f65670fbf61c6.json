{"ast":null,"code":"var _jsxFileName = \"/Users/juandavidballesterosperez014/Practica_U-1/frontend/src/components/location/locationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport Geocode from \"react-geocode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"TU_API_KEY\"); // Reemplaza con tu API key real\nGeocode.setLanguage(\"es\");\nGeocode.setRegion(\"es\");\nconst mapStyles = {\n  width: '100%',\n  height: '500px'\n};\nconst LocationPage = props => {\n  _s();\n  const [userLocation, setUserLocation] = useState({\n    lat: 0,\n    lng: 0\n  });\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    // Supongamos que obtienes un array de direcciones desde tu backend\n    const direcciones = [\"Carrera 13 #60-80, Bogotá, Colombia\", \"Calle 85 #45-36, Bogotá, Colombia\"\n    // Añade más direcciones aquí\n    ];\n    const fetchLocations = async () => {\n      try {\n        const geocodedLocations = await Promise.all(direcciones.map(async direccion => {\n          const response = await Geocode.fromAddress(direccion);\n          const {\n            lat,\n            lng\n          } = response.results[0].geometry.location;\n          return {\n            lat,\n            lng\n          };\n        }));\n        setLocations(geocodedLocations);\n      } catch (error) {\n        console.error('Error fetching locations:', error);\n      }\n    };\n    fetchLocations();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Map, {\n    google: props.google,\n    zoom: 12,\n    style: mapStyles,\n    initialCenter: userLocation,\n    children: [/*#__PURE__*/_jsxDEV(Marker, {\n      position: userLocation,\n      title: \"Tu Ubicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), locations.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: location.lat,\n        lng: location.lng\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationPage, \"njBfc/cmlkI5KEscwb9Xa7UfKw0=\");\n_c = LocationPage;\nexport default GoogleApiWrapper({\n  apiKey: 'TU_API_KEY' // Reemplaza 'TU_API_KEY' con tu clave API real\n})(LocationPage);\nvar _c;\n$RefreshReg$(_c, \"LocationPage\");","map":{"version":3,"names":["React","useState","useEffect","Map","GoogleApiWrapper","Marker","Geocode","jsxDEV","_jsxDEV","setApiKey","setLanguage","setRegion","mapStyles","width","height","LocationPage","props","_s","userLocation","setUserLocation","lat","lng","locations","setLocations","direcciones","fetchLocations","geocodedLocations","Promise","all","map","direccion","response","fromAddress","results","geometry","location","error","console","google","zoom","style","initialCenter","children","position","title","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","apiKey","$RefreshReg$"],"sources":["/Users/juandavidballesterosperez014/Practica_U-1/frontend/src/components/location/locationPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport Geocode from \"react-geocode\";\n\nGeocode.setApiKey(\"TU_API_KEY\"); // Reemplaza con tu API key real\nGeocode.setLanguage(\"es\");\nGeocode.setRegion(\"es\");\n\nconst mapStyles = {\n  width: '100%',\n  height: '500px',\n};\n\nconst LocationPage = (props) => {\n  const [userLocation, setUserLocation] = useState({ lat: 0, lng: 0 });\n  const [locations, setLocations] = useState([]);\n\n  useEffect(() => {\n    // Supongamos que obtienes un array de direcciones desde tu backend\n    const direcciones = [\n      \"Carrera 13 #60-80, Bogotá, Colombia\",\n      \"Calle 85 #45-36, Bogotá, Colombia\",\n      // Añade más direcciones aquí\n    ];\n\n    const fetchLocations = async () => {\n      try {\n        const geocodedLocations = await Promise.all(\n          direcciones.map(async (direccion) => {\n            const response = await Geocode.fromAddress(direccion);\n            const { lat, lng } = response.results[0].geometry.location;\n            return { lat, lng };\n          })\n        );\n\n        setLocations(geocodedLocations);\n      } catch (error) {\n        console.error('Error fetching locations:', error);\n      }\n    };\n\n    fetchLocations();\n  }, []);\n\n  return (\n    <Map google={props.google} zoom={12} style={mapStyles} initialCenter={userLocation}>\n      <Marker position={userLocation} title=\"Tu Ubicación\" />\n      {locations.map((location, index) => (\n        <Marker key={index} position={{ lat: location.lat, lng: location.lng }} />\n      ))}\n    </Map>\n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: 'TU_API_KEY' // Reemplaza 'TU_API_KEY' con tu clave API real\n})(LocationPage);\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,gBAAgB,EAAEC,MAAM,QAAQ,mBAAmB;AACjE,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpCF,OAAO,CAACG,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;AACjCH,OAAO,CAACI,WAAW,CAAC,IAAI,CAAC;AACzBJ,OAAO,CAACK,SAAS,CAAC,IAAI,CAAC;AAEvB,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC;IAAEmB,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAE,CAAC,CAAC;EACpE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMsB,WAAW,GAAG,CAClB,qCAAqC,EACrC;IACA;IAAA,CACD;IAED,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,iBAAiB,GAAG,MAAMC,OAAO,CAACC,GAAG,CACzCJ,WAAW,CAACK,GAAG,CAAC,MAAOC,SAAS,IAAK;UACnC,MAAMC,QAAQ,GAAG,MAAMzB,OAAO,CAAC0B,WAAW,CAACF,SAAS,CAAC;UACrD,MAAM;YAAEV,GAAG;YAAEC;UAAI,CAAC,GAAGU,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACC,QAAQ;UAC1D,OAAO;YAAEf,GAAG;YAAEC;UAAI,CAAC;QACrB,CAAC,CACH,CAAC;QAEDE,YAAY,CAACG,iBAAiB,CAAC;MACjC,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDX,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA,CAACL,GAAG;IAACmC,MAAM,EAAEtB,KAAK,CAACsB,MAAO;IAACC,IAAI,EAAE,EAAG;IAACC,KAAK,EAAE5B,SAAU;IAAC6B,aAAa,EAAEvB,YAAa;IAAAwB,QAAA,gBACjFlC,OAAA,CAACH,MAAM;MAACsC,QAAQ,EAAEzB,YAAa;MAAC0B,KAAK,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACtD1B,SAAS,CAACO,GAAG,CAAC,CAACM,QAAQ,EAAEc,KAAK,kBAC7BzC,OAAA,CAACH,MAAM;MAAasC,QAAQ,EAAE;QAAEvB,GAAG,EAAEe,QAAQ,CAACf,GAAG;QAAEC,GAAG,EAAEc,QAAQ,CAACd;MAAI;IAAE,GAA1D4B,KAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuD,CAC1E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/B,EAAA,CAvCIF,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AAyClB,eAAeX,gBAAgB,CAAC;EAC9B+C,MAAM,EAAE,YAAY,CAAC;AACvB,CAAC,CAAC,CAACpC,YAAY,CAAC;AAAC,IAAAmC,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}